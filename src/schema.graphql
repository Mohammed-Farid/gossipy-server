type User {
  id: Int!
  name: String!
  identifier: String!
  password: String
  email: String
  stations: [Station!]!
  memberships: [Membership!]!
  topics: [Topic!]!
  comments: [Comment!]!
  votes: [Vote!]!
  karma: [Vote!]!
  createdAt: String!
  updatedAt: String!
}

type Station {
  id: Int!
  name: String!
  identifier: String!
  description: String!
  public: Boolean!
  users: [User!]!
  members: [Membership!]!
  topics: [Topic!]!
  comments: [Comment!]!
  votes: [Vote!]!
  createdAt: String!
  updatedAt: String!
}

type Membership {
  id: Int!
  userId: Int!
  user: User!
  stationId: Int!
  station: Station!
  role: Role!
  topics: [Topic!]!
  comments: [Comment!]!
  votes: [Vote!]!
  state: State!
  createdAt: String!
  updatedAt: String!
}

type Topic {
  id: Int!
  title: String!
  identifier: String!
  content: String!
  sealed: Boolean!
  userId: Int!
  membershipId: Int!
  stationId: Int!
  user: User!
  membership: Membership!
  station: Station!
  comments: [Comment!]!
  votes: [Vote!]!
  createdAt: String!
  updatedAt: String!
}

type Comment {
  id: Int!
  content: String!
  membershipId: Int!
  userId: Int!
  topicId: Int!
  stationId: Int!
  user: User!
  membership: Membership!
  station: Station!
  topic: Topic!
  createdAt: String!
  updatedAt: String!
}

type Vote {
  id: Int!
  type: VoteType!
  membershipId: Int!
  userId: Int!
  topicId: Int!
  stationId: Int!

  user: User!
  station: Station!
  topic: Topic!
  comment: Comment
  membership: Membership!
  createdAt: String!
  updatedAt: String!
}

type Query {
  comments(topicId: Int, user: Int): [Comment!]!
  comment(commentId: Int!): Comment!

  memberships(
    user: Int
    station: Int
    page: Int
    roles: [Role!]
    states: [State!]
  ): [Membership!]!
  membership(stationId: Int!): Membership!

  stations(query: String!): [Station!]!
  station(identifier: String!): Station!

  topics(
    sortType: SortType!
    dateRange: DateRange!
    explore: Boolean!
    user: Int
    station: Int
  ): [Topic!]!
  topic(identifier: String!, stationId: Int!): Topic!

  users: [User!]!
  profile(identifier: String!): User!
}

type DeleteMembership {
  membership: Membership!
  user: User!
  station: Station!
}

type Mutation {
  signUp(data: CreateUserInput!): AuthPayload!
  signIn(data: LoginUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  createStation(data: CreateStationInput!): Station!
  updateStation(id: Int!, data: UpdateStationInput!): Station!
  deleteStation(id: Int!): Station!
  createMembership(stationId: Int!): Membership!
  updateMembership(id: Int!, data: MembershipUpdateInput): Membership!
  unsubscribeMembership(id: Int!): Membership!
  deleteMembership(id: Int!): DeleteMembership!
  createTopic(data: CreateTopicInput!): Topic!
  updateTopic(id: Int!, data: UpdateTopicInput): Topic!
  deleteTopic(id: Int!): Topic!
  createComment(data: CreateCommentInput!): Comment!
  updateComment(id: Int!, data: UpdateCommentInput!): Comment!
  deleteComment(id: Int!): Comment!
  createVote(data: CreateVoteInput): Vote!
  updateVote(id: Int!, data: UpdateVoteInput!): Vote!
  deleteVote(id: Int!): Vote!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  email: String
  password: String
}

input CreateStationInput {
  name: String!
  description: String!
  public: Boolean!
}

input UpdateStationInput {
  description: String
  public: Boolean
}

input MembershipUpdateInput {
  role: Role
  state: State
}

input CreateTopicInput {
  title: String!
  content: String!
  station: Int!
}

input UpdateTopicInput {
  title: String
  content: String
}

input CreateCommentInput {
  content: String!
  topic: String!
}

input UpdateCommentInput {
  content: String!
}

input CreateVoteInput {
  topic: Int!
  comment: Int
  type: VoteType
}

input UpdateVoteInput {
  type: VoteType
}

enum Role {
  FOUNDER
  ADMIN
  MODERATOR
  MEMBER
}

enum State {
  PENDING
  ACTIVE
  DETACHED
  BANNED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum SortType {
  HOT
  TOP
  NEW
}

enum DateRange {
  TODAY
  THREE_DAYS
  WEEK
  MONTH
  THREE_MONTH
  SIX_MONTH
  YEAR
  EVER
}
