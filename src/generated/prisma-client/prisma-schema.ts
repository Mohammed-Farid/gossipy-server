// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateComment {
  count: Int!
}

type AggregateMembership {
  count: Int!
}

type AggregateStation {
  count: Int!
}

type AggregateTopic {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  content: String!
  user: User!
  station: Station!
  membership: Membership!
  topic: Topic!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  content: String!
  user: UserCreateOneWithoutCommentsInput!
  station: StationCreateOneWithoutCommentsInput!
  membership: MembershipCreateOneWithoutCommentsInput!
  topic: TopicCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
}

input CommentCreateManyWithoutMembershipInput {
  create: [CommentCreateWithoutMembershipInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutStationInput {
  create: [CommentCreateWithoutStationInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutTopicInput {
  create: [CommentCreateWithoutTopicInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutMembershipInput {
  id: ID
  content: String!
  user: UserCreateOneWithoutCommentsInput!
  station: StationCreateOneWithoutCommentsInput!
  topic: TopicCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutStationInput {
  id: ID
  content: String!
  user: UserCreateOneWithoutCommentsInput!
  membership: MembershipCreateOneWithoutCommentsInput!
  topic: TopicCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutTopicInput {
  id: ID
  content: String!
  user: UserCreateOneWithoutCommentsInput!
  station: StationCreateOneWithoutCommentsInput!
  membership: MembershipCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutUserInput {
  id: ID
  content: String!
  station: StationCreateOneWithoutCommentsInput!
  membership: MembershipCreateOneWithoutCommentsInput!
  topic: TopicCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutVotesInput {
  id: ID
  content: String!
  user: UserCreateOneWithoutCommentsInput!
  station: StationCreateOneWithoutCommentsInput!
  membership: MembershipCreateOneWithoutCommentsInput!
  topic: TopicCreateOneWithoutCommentsInput!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  content: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  station: StationUpdateOneRequiredWithoutCommentsInput
  membership: MembershipUpdateOneRequiredWithoutCommentsInput
  topic: TopicUpdateOneRequiredWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
}

input CommentUpdateManyDataInput {
  content: String
}

input CommentUpdateManyMutationInput {
  content: String
}

input CommentUpdateManyWithoutMembershipInput {
  create: [CommentCreateWithoutMembershipInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutMembershipInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutMembershipInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutStationInput {
  create: [CommentCreateWithoutStationInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutStationInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutStationInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutTopicInput {
  create: [CommentCreateWithoutTopicInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutTopicInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutTopicInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  update: CommentUpdateWithoutVotesDataInput
  upsert: CommentUpsertWithoutVotesInput
  delete: Boolean
  disconnect: Boolean
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutMembershipDataInput {
  content: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  station: StationUpdateOneRequiredWithoutCommentsInput
  topic: TopicUpdateOneRequiredWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutStationDataInput {
  content: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  membership: MembershipUpdateOneRequiredWithoutCommentsInput
  topic: TopicUpdateOneRequiredWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutTopicDataInput {
  content: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  station: StationUpdateOneRequiredWithoutCommentsInput
  membership: MembershipUpdateOneRequiredWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutUserDataInput {
  content: String
  station: StationUpdateOneRequiredWithoutCommentsInput
  membership: MembershipUpdateOneRequiredWithoutCommentsInput
  topic: TopicUpdateOneRequiredWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutVotesDataInput {
  content: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  station: StationUpdateOneRequiredWithoutCommentsInput
  membership: MembershipUpdateOneRequiredWithoutCommentsInput
  topic: TopicUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutMembershipInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutMembershipDataInput!
}

input CommentUpdateWithWhereUniqueWithoutStationInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutStationDataInput!
}

input CommentUpdateWithWhereUniqueWithoutTopicInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutTopicDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithoutVotesInput {
  update: CommentUpdateWithoutVotesDataInput!
  create: CommentCreateWithoutVotesInput!
}

input CommentUpsertWithWhereUniqueWithoutMembershipInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutMembershipDataInput!
  create: CommentCreateWithoutMembershipInput!
}

input CommentUpsertWithWhereUniqueWithoutStationInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutStationDataInput!
  create: CommentCreateWithoutStationInput!
}

input CommentUpsertWithWhereUniqueWithoutTopicInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutTopicDataInput!
  create: CommentCreateWithoutTopicInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  user: UserWhereInput
  station: StationWhereInput
  membership: MembershipWhereInput
  topic: TopicWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Membership {
  id: ID!
  user: User!
  station: Station!
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  role: Role!
  state: MembershipState!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MembershipConnection {
  pageInfo: PageInfo!
  edges: [MembershipEdge]!
  aggregate: AggregateMembership!
}

input MembershipCreateInput {
  id: ID
  user: UserCreateOneWithoutMembershipsInput!
  station: StationCreateOneWithoutMembersInput!
  topics: TopicCreateManyWithoutMembershipInput
  comments: CommentCreateManyWithoutMembershipInput
  votes: VoteCreateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipCreateManyWithoutStationInput {
  create: [MembershipCreateWithoutStationInput!]
  connect: [MembershipWhereUniqueInput!]
}

input MembershipCreateManyWithoutUserInput {
  create: [MembershipCreateWithoutUserInput!]
  connect: [MembershipWhereUniqueInput!]
}

input MembershipCreateOneWithoutCommentsInput {
  create: MembershipCreateWithoutCommentsInput
  connect: MembershipWhereUniqueInput
}

input MembershipCreateOneWithoutTopicsInput {
  create: MembershipCreateWithoutTopicsInput
  connect: MembershipWhereUniqueInput
}

input MembershipCreateOneWithoutVotesInput {
  create: MembershipCreateWithoutVotesInput
  connect: MembershipWhereUniqueInput
}

input MembershipCreateWithoutCommentsInput {
  id: ID
  user: UserCreateOneWithoutMembershipsInput!
  station: StationCreateOneWithoutMembersInput!
  topics: TopicCreateManyWithoutMembershipInput
  votes: VoteCreateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipCreateWithoutStationInput {
  id: ID
  user: UserCreateOneWithoutMembershipsInput!
  topics: TopicCreateManyWithoutMembershipInput
  comments: CommentCreateManyWithoutMembershipInput
  votes: VoteCreateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipCreateWithoutTopicsInput {
  id: ID
  user: UserCreateOneWithoutMembershipsInput!
  station: StationCreateOneWithoutMembersInput!
  comments: CommentCreateManyWithoutMembershipInput
  votes: VoteCreateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipCreateWithoutUserInput {
  id: ID
  station: StationCreateOneWithoutMembersInput!
  topics: TopicCreateManyWithoutMembershipInput
  comments: CommentCreateManyWithoutMembershipInput
  votes: VoteCreateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipCreateWithoutVotesInput {
  id: ID
  user: UserCreateOneWithoutMembershipsInput!
  station: StationCreateOneWithoutMembersInput!
  topics: TopicCreateManyWithoutMembershipInput
  comments: CommentCreateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

type MembershipEdge {
  node: Membership!
  cursor: String!
}

enum MembershipOrderByInput {
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  state_ASC
  state_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MembershipPreviousValues {
  id: ID!
  role: Role!
  state: MembershipState!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MembershipScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  state: MembershipState
  state_not: MembershipState
  state_in: [MembershipState!]
  state_not_in: [MembershipState!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MembershipScalarWhereInput!]
  OR: [MembershipScalarWhereInput!]
  NOT: [MembershipScalarWhereInput!]
}

enum MembershipState {
  PENDING
  ACTIVE
  DETACHED
  BANNED
}

type MembershipSubscriptionPayload {
  mutation: MutationType!
  node: Membership
  updatedFields: [String!]
  previousValues: MembershipPreviousValues
}

input MembershipSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MembershipWhereInput
  AND: [MembershipSubscriptionWhereInput!]
  OR: [MembershipSubscriptionWhereInput!]
  NOT: [MembershipSubscriptionWhereInput!]
}

input MembershipUpdateInput {
  user: UserUpdateOneRequiredWithoutMembershipsInput
  station: StationUpdateOneRequiredWithoutMembersInput
  topics: TopicUpdateManyWithoutMembershipInput
  comments: CommentUpdateManyWithoutMembershipInput
  votes: VoteUpdateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipUpdateManyDataInput {
  role: Role
  state: MembershipState
}

input MembershipUpdateManyMutationInput {
  role: Role
  state: MembershipState
}

input MembershipUpdateManyWithoutStationInput {
  create: [MembershipCreateWithoutStationInput!]
  delete: [MembershipWhereUniqueInput!]
  connect: [MembershipWhereUniqueInput!]
  set: [MembershipWhereUniqueInput!]
  disconnect: [MembershipWhereUniqueInput!]
  update: [MembershipUpdateWithWhereUniqueWithoutStationInput!]
  upsert: [MembershipUpsertWithWhereUniqueWithoutStationInput!]
  deleteMany: [MembershipScalarWhereInput!]
  updateMany: [MembershipUpdateManyWithWhereNestedInput!]
}

input MembershipUpdateManyWithoutUserInput {
  create: [MembershipCreateWithoutUserInput!]
  delete: [MembershipWhereUniqueInput!]
  connect: [MembershipWhereUniqueInput!]
  set: [MembershipWhereUniqueInput!]
  disconnect: [MembershipWhereUniqueInput!]
  update: [MembershipUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [MembershipUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [MembershipScalarWhereInput!]
  updateMany: [MembershipUpdateManyWithWhereNestedInput!]
}

input MembershipUpdateManyWithWhereNestedInput {
  where: MembershipScalarWhereInput!
  data: MembershipUpdateManyDataInput!
}

input MembershipUpdateOneRequiredWithoutCommentsInput {
  create: MembershipCreateWithoutCommentsInput
  update: MembershipUpdateWithoutCommentsDataInput
  upsert: MembershipUpsertWithoutCommentsInput
  connect: MembershipWhereUniqueInput
}

input MembershipUpdateOneRequiredWithoutTopicsInput {
  create: MembershipCreateWithoutTopicsInput
  update: MembershipUpdateWithoutTopicsDataInput
  upsert: MembershipUpsertWithoutTopicsInput
  connect: MembershipWhereUniqueInput
}

input MembershipUpdateOneRequiredWithoutVotesInput {
  create: MembershipCreateWithoutVotesInput
  update: MembershipUpdateWithoutVotesDataInput
  upsert: MembershipUpsertWithoutVotesInput
  connect: MembershipWhereUniqueInput
}

input MembershipUpdateWithoutCommentsDataInput {
  user: UserUpdateOneRequiredWithoutMembershipsInput
  station: StationUpdateOneRequiredWithoutMembersInput
  topics: TopicUpdateManyWithoutMembershipInput
  votes: VoteUpdateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipUpdateWithoutStationDataInput {
  user: UserUpdateOneRequiredWithoutMembershipsInput
  topics: TopicUpdateManyWithoutMembershipInput
  comments: CommentUpdateManyWithoutMembershipInput
  votes: VoteUpdateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipUpdateWithoutTopicsDataInput {
  user: UserUpdateOneRequiredWithoutMembershipsInput
  station: StationUpdateOneRequiredWithoutMembersInput
  comments: CommentUpdateManyWithoutMembershipInput
  votes: VoteUpdateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipUpdateWithoutUserDataInput {
  station: StationUpdateOneRequiredWithoutMembersInput
  topics: TopicUpdateManyWithoutMembershipInput
  comments: CommentUpdateManyWithoutMembershipInput
  votes: VoteUpdateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipUpdateWithoutVotesDataInput {
  user: UserUpdateOneRequiredWithoutMembershipsInput
  station: StationUpdateOneRequiredWithoutMembersInput
  topics: TopicUpdateManyWithoutMembershipInput
  comments: CommentUpdateManyWithoutMembershipInput
  role: Role
  state: MembershipState
}

input MembershipUpdateWithWhereUniqueWithoutStationInput {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateWithoutStationDataInput!
}

input MembershipUpdateWithWhereUniqueWithoutUserInput {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateWithoutUserDataInput!
}

input MembershipUpsertWithoutCommentsInput {
  update: MembershipUpdateWithoutCommentsDataInput!
  create: MembershipCreateWithoutCommentsInput!
}

input MembershipUpsertWithoutTopicsInput {
  update: MembershipUpdateWithoutTopicsDataInput!
  create: MembershipCreateWithoutTopicsInput!
}

input MembershipUpsertWithoutVotesInput {
  update: MembershipUpdateWithoutVotesDataInput!
  create: MembershipCreateWithoutVotesInput!
}

input MembershipUpsertWithWhereUniqueWithoutStationInput {
  where: MembershipWhereUniqueInput!
  update: MembershipUpdateWithoutStationDataInput!
  create: MembershipCreateWithoutStationInput!
}

input MembershipUpsertWithWhereUniqueWithoutUserInput {
  where: MembershipWhereUniqueInput!
  update: MembershipUpdateWithoutUserDataInput!
  create: MembershipCreateWithoutUserInput!
}

input MembershipWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  station: StationWhereInput
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  state: MembershipState
  state_not: MembershipState
  state_in: [MembershipState!]
  state_not_in: [MembershipState!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
  NOT: [MembershipWhereInput!]
}

input MembershipWhereUniqueInput {
  id: ID
}

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createMembership(data: MembershipCreateInput!): Membership!
  updateMembership(data: MembershipUpdateInput!, where: MembershipWhereUniqueInput!): Membership
  updateManyMemberships(data: MembershipUpdateManyMutationInput!, where: MembershipWhereInput): BatchPayload!
  upsertMembership(where: MembershipWhereUniqueInput!, create: MembershipCreateInput!, update: MembershipUpdateInput!): Membership!
  deleteMembership(where: MembershipWhereUniqueInput!): Membership
  deleteManyMemberships(where: MembershipWhereInput): BatchPayload!
  createStation(data: StationCreateInput!): Station!
  updateStation(data: StationUpdateInput!, where: StationWhereUniqueInput!): Station
  updateManyStations(data: StationUpdateManyMutationInput!, where: StationWhereInput): BatchPayload!
  upsertStation(where: StationWhereUniqueInput!, create: StationCreateInput!, update: StationUpdateInput!): Station!
  deleteStation(where: StationWhereUniqueInput!): Station
  deleteManyStations(where: StationWhereInput): BatchPayload!
  createTopic(data: TopicCreateInput!): Topic!
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
  updateManyTopics(data: TopicUpdateManyMutationInput!, where: TopicWhereInput): BatchPayload!
  upsertTopic(where: TopicWhereUniqueInput!, create: TopicCreateInput!, update: TopicUpdateInput!): Topic!
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteManyTopics(where: TopicWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateManyVotes(data: VoteUpdateManyMutationInput!, where: VoteWhereInput): BatchPayload!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  membership(where: MembershipWhereUniqueInput!): Membership
  memberships(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Membership]!
  membershipsConnection(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MembershipConnection!
  station(where: StationWhereUniqueInput!): Station
  stations(where: StationWhereInput, orderBy: StationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Station]!
  stationsConnection(where: StationWhereInput, orderBy: StationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StationConnection!
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic]!
  topicsConnection(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopicConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

enum Role {
  FOUNDER
  ADMIN
  MODERATOR
  MEMBER
}

type Station {
  id: ID!
  name: String!
  identifier: String
  description: String!
  public: Boolean!
  members(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Membership!]
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StationConnection {
  pageInfo: PageInfo!
  edges: [StationEdge]!
  aggregate: AggregateStation!
}

input StationCreateInput {
  id: ID
  name: String!
  identifier: String
  description: String!
  public: Boolean
  members: MembershipCreateManyWithoutStationInput
  topics: TopicCreateManyWithoutStationInput
  comments: CommentCreateManyWithoutStationInput
  votes: VoteCreateManyWithoutStationInput
}

input StationCreateOneWithoutCommentsInput {
  create: StationCreateWithoutCommentsInput
  connect: StationWhereUniqueInput
}

input StationCreateOneWithoutMembersInput {
  create: StationCreateWithoutMembersInput
  connect: StationWhereUniqueInput
}

input StationCreateOneWithoutTopicsInput {
  create: StationCreateWithoutTopicsInput
  connect: StationWhereUniqueInput
}

input StationCreateOneWithoutVotesInput {
  create: StationCreateWithoutVotesInput
  connect: StationWhereUniqueInput
}

input StationCreateWithoutCommentsInput {
  id: ID
  name: String!
  identifier: String
  description: String!
  public: Boolean
  members: MembershipCreateManyWithoutStationInput
  topics: TopicCreateManyWithoutStationInput
  votes: VoteCreateManyWithoutStationInput
}

input StationCreateWithoutMembersInput {
  id: ID
  name: String!
  identifier: String
  description: String!
  public: Boolean
  topics: TopicCreateManyWithoutStationInput
  comments: CommentCreateManyWithoutStationInput
  votes: VoteCreateManyWithoutStationInput
}

input StationCreateWithoutTopicsInput {
  id: ID
  name: String!
  identifier: String
  description: String!
  public: Boolean
  members: MembershipCreateManyWithoutStationInput
  comments: CommentCreateManyWithoutStationInput
  votes: VoteCreateManyWithoutStationInput
}

input StationCreateWithoutVotesInput {
  id: ID
  name: String!
  identifier: String
  description: String!
  public: Boolean
  members: MembershipCreateManyWithoutStationInput
  topics: TopicCreateManyWithoutStationInput
  comments: CommentCreateManyWithoutStationInput
}

type StationEdge {
  node: Station!
  cursor: String!
}

enum StationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  identifier_ASC
  identifier_DESC
  description_ASC
  description_DESC
  public_ASC
  public_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StationPreviousValues {
  id: ID!
  name: String!
  identifier: String
  description: String!
  public: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StationSubscriptionPayload {
  mutation: MutationType!
  node: Station
  updatedFields: [String!]
  previousValues: StationPreviousValues
}

input StationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StationWhereInput
  AND: [StationSubscriptionWhereInput!]
  OR: [StationSubscriptionWhereInput!]
  NOT: [StationSubscriptionWhereInput!]
}

input StationUpdateInput {
  name: String
  identifier: String
  description: String
  public: Boolean
  members: MembershipUpdateManyWithoutStationInput
  topics: TopicUpdateManyWithoutStationInput
  comments: CommentUpdateManyWithoutStationInput
  votes: VoteUpdateManyWithoutStationInput
}

input StationUpdateManyMutationInput {
  name: String
  identifier: String
  description: String
  public: Boolean
}

input StationUpdateOneRequiredWithoutCommentsInput {
  create: StationCreateWithoutCommentsInput
  update: StationUpdateWithoutCommentsDataInput
  upsert: StationUpsertWithoutCommentsInput
  connect: StationWhereUniqueInput
}

input StationUpdateOneRequiredWithoutMembersInput {
  create: StationCreateWithoutMembersInput
  update: StationUpdateWithoutMembersDataInput
  upsert: StationUpsertWithoutMembersInput
  connect: StationWhereUniqueInput
}

input StationUpdateOneRequiredWithoutTopicsInput {
  create: StationCreateWithoutTopicsInput
  update: StationUpdateWithoutTopicsDataInput
  upsert: StationUpsertWithoutTopicsInput
  connect: StationWhereUniqueInput
}

input StationUpdateOneRequiredWithoutVotesInput {
  create: StationCreateWithoutVotesInput
  update: StationUpdateWithoutVotesDataInput
  upsert: StationUpsertWithoutVotesInput
  connect: StationWhereUniqueInput
}

input StationUpdateWithoutCommentsDataInput {
  name: String
  identifier: String
  description: String
  public: Boolean
  members: MembershipUpdateManyWithoutStationInput
  topics: TopicUpdateManyWithoutStationInput
  votes: VoteUpdateManyWithoutStationInput
}

input StationUpdateWithoutMembersDataInput {
  name: String
  identifier: String
  description: String
  public: Boolean
  topics: TopicUpdateManyWithoutStationInput
  comments: CommentUpdateManyWithoutStationInput
  votes: VoteUpdateManyWithoutStationInput
}

input StationUpdateWithoutTopicsDataInput {
  name: String
  identifier: String
  description: String
  public: Boolean
  members: MembershipUpdateManyWithoutStationInput
  comments: CommentUpdateManyWithoutStationInput
  votes: VoteUpdateManyWithoutStationInput
}

input StationUpdateWithoutVotesDataInput {
  name: String
  identifier: String
  description: String
  public: Boolean
  members: MembershipUpdateManyWithoutStationInput
  topics: TopicUpdateManyWithoutStationInput
  comments: CommentUpdateManyWithoutStationInput
}

input StationUpsertWithoutCommentsInput {
  update: StationUpdateWithoutCommentsDataInput!
  create: StationCreateWithoutCommentsInput!
}

input StationUpsertWithoutMembersInput {
  update: StationUpdateWithoutMembersDataInput!
  create: StationCreateWithoutMembersInput!
}

input StationUpsertWithoutTopicsInput {
  update: StationUpdateWithoutTopicsDataInput!
  create: StationCreateWithoutTopicsInput!
}

input StationUpsertWithoutVotesInput {
  update: StationUpdateWithoutVotesDataInput!
  create: StationCreateWithoutVotesInput!
}

input StationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  identifier: String
  identifier_not: String
  identifier_in: [String!]
  identifier_not_in: [String!]
  identifier_lt: String
  identifier_lte: String
  identifier_gt: String
  identifier_gte: String
  identifier_contains: String
  identifier_not_contains: String
  identifier_starts_with: String
  identifier_not_starts_with: String
  identifier_ends_with: String
  identifier_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  public: Boolean
  public_not: Boolean
  members_every: MembershipWhereInput
  members_some: MembershipWhereInput
  members_none: MembershipWhereInput
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StationWhereInput!]
  OR: [StationWhereInput!]
  NOT: [StationWhereInput!]
}

input StationWhereUniqueInput {
  id: ID
  identifier: String
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  membership(where: MembershipSubscriptionWhereInput): MembershipSubscriptionPayload
  station(where: StationSubscriptionWhereInput): StationSubscriptionPayload
  topic(where: TopicSubscriptionWhereInput): TopicSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type Topic {
  id: ID!
  title: String!
  identifier: String!
  content: String!
  user: User!
  station: Station!
  membership: Membership!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TopicConnection {
  pageInfo: PageInfo!
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}

input TopicCreateInput {
  id: ID
  title: String!
  identifier: String!
  content: String!
  user: UserCreateOneWithoutTopicsInput!
  station: StationCreateOneWithoutTopicsInput!
  membership: MembershipCreateOneWithoutTopicsInput!
  comments: CommentCreateManyWithoutTopicInput
  votes: VoteCreateManyWithoutTopicInput
}

input TopicCreateManyWithoutMembershipInput {
  create: [TopicCreateWithoutMembershipInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutStationInput {
  create: [TopicCreateWithoutStationInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutUserInput {
  create: [TopicCreateWithoutUserInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateOneWithoutCommentsInput {
  create: TopicCreateWithoutCommentsInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutVotesInput {
  create: TopicCreateWithoutVotesInput
  connect: TopicWhereUniqueInput
}

input TopicCreateWithoutCommentsInput {
  id: ID
  title: String!
  identifier: String!
  content: String!
  user: UserCreateOneWithoutTopicsInput!
  station: StationCreateOneWithoutTopicsInput!
  membership: MembershipCreateOneWithoutTopicsInput!
  votes: VoteCreateManyWithoutTopicInput
}

input TopicCreateWithoutMembershipInput {
  id: ID
  title: String!
  identifier: String!
  content: String!
  user: UserCreateOneWithoutTopicsInput!
  station: StationCreateOneWithoutTopicsInput!
  comments: CommentCreateManyWithoutTopicInput
  votes: VoteCreateManyWithoutTopicInput
}

input TopicCreateWithoutStationInput {
  id: ID
  title: String!
  identifier: String!
  content: String!
  user: UserCreateOneWithoutTopicsInput!
  membership: MembershipCreateOneWithoutTopicsInput!
  comments: CommentCreateManyWithoutTopicInput
  votes: VoteCreateManyWithoutTopicInput
}

input TopicCreateWithoutUserInput {
  id: ID
  title: String!
  identifier: String!
  content: String!
  station: StationCreateOneWithoutTopicsInput!
  membership: MembershipCreateOneWithoutTopicsInput!
  comments: CommentCreateManyWithoutTopicInput
  votes: VoteCreateManyWithoutTopicInput
}

input TopicCreateWithoutVotesInput {
  id: ID
  title: String!
  identifier: String!
  content: String!
  user: UserCreateOneWithoutTopicsInput!
  station: StationCreateOneWithoutTopicsInput!
  membership: MembershipCreateOneWithoutTopicsInput!
  comments: CommentCreateManyWithoutTopicInput
}

type TopicEdge {
  node: Topic!
  cursor: String!
}

enum TopicOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  identifier_ASC
  identifier_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TopicPreviousValues {
  id: ID!
  title: String!
  identifier: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TopicScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  identifier: String
  identifier_not: String
  identifier_in: [String!]
  identifier_not_in: [String!]
  identifier_lt: String
  identifier_lte: String
  identifier_gt: String
  identifier_gte: String
  identifier_contains: String
  identifier_not_contains: String
  identifier_starts_with: String
  identifier_not_starts_with: String
  identifier_ends_with: String
  identifier_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TopicScalarWhereInput!]
  OR: [TopicScalarWhereInput!]
  NOT: [TopicScalarWhereInput!]
}

type TopicSubscriptionPayload {
  mutation: MutationType!
  node: Topic
  updatedFields: [String!]
  previousValues: TopicPreviousValues
}

input TopicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TopicWhereInput
  AND: [TopicSubscriptionWhereInput!]
  OR: [TopicSubscriptionWhereInput!]
  NOT: [TopicSubscriptionWhereInput!]
}

input TopicUpdateInput {
  title: String
  identifier: String
  content: String
  user: UserUpdateOneRequiredWithoutTopicsInput
  station: StationUpdateOneRequiredWithoutTopicsInput
  membership: MembershipUpdateOneRequiredWithoutTopicsInput
  comments: CommentUpdateManyWithoutTopicInput
  votes: VoteUpdateManyWithoutTopicInput
}

input TopicUpdateManyDataInput {
  title: String
  identifier: String
  content: String
}

input TopicUpdateManyMutationInput {
  title: String
  identifier: String
  content: String
}

input TopicUpdateManyWithoutMembershipInput {
  create: [TopicCreateWithoutMembershipInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutMembershipInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutMembershipInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithoutStationInput {
  create: [TopicCreateWithoutStationInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutStationInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutStationInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithoutUserInput {
  create: [TopicCreateWithoutUserInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput!
  data: TopicUpdateManyDataInput!
}

input TopicUpdateOneRequiredWithoutCommentsInput {
  create: TopicCreateWithoutCommentsInput
  update: TopicUpdateWithoutCommentsDataInput
  upsert: TopicUpsertWithoutCommentsInput
  connect: TopicWhereUniqueInput
}

input TopicUpdateOneRequiredWithoutVotesInput {
  create: TopicCreateWithoutVotesInput
  update: TopicUpdateWithoutVotesDataInput
  upsert: TopicUpsertWithoutVotesInput
  connect: TopicWhereUniqueInput
}

input TopicUpdateWithoutCommentsDataInput {
  title: String
  identifier: String
  content: String
  user: UserUpdateOneRequiredWithoutTopicsInput
  station: StationUpdateOneRequiredWithoutTopicsInput
  membership: MembershipUpdateOneRequiredWithoutTopicsInput
  votes: VoteUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutMembershipDataInput {
  title: String
  identifier: String
  content: String
  user: UserUpdateOneRequiredWithoutTopicsInput
  station: StationUpdateOneRequiredWithoutTopicsInput
  comments: CommentUpdateManyWithoutTopicInput
  votes: VoteUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutStationDataInput {
  title: String
  identifier: String
  content: String
  user: UserUpdateOneRequiredWithoutTopicsInput
  membership: MembershipUpdateOneRequiredWithoutTopicsInput
  comments: CommentUpdateManyWithoutTopicInput
  votes: VoteUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutUserDataInput {
  title: String
  identifier: String
  content: String
  station: StationUpdateOneRequiredWithoutTopicsInput
  membership: MembershipUpdateOneRequiredWithoutTopicsInput
  comments: CommentUpdateManyWithoutTopicInput
  votes: VoteUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutVotesDataInput {
  title: String
  identifier: String
  content: String
  user: UserUpdateOneRequiredWithoutTopicsInput
  station: StationUpdateOneRequiredWithoutTopicsInput
  membership: MembershipUpdateOneRequiredWithoutTopicsInput
  comments: CommentUpdateManyWithoutTopicInput
}

input TopicUpdateWithWhereUniqueWithoutMembershipInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutMembershipDataInput!
}

input TopicUpdateWithWhereUniqueWithoutStationInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutStationDataInput!
}

input TopicUpdateWithWhereUniqueWithoutUserInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutUserDataInput!
}

input TopicUpsertWithoutCommentsInput {
  update: TopicUpdateWithoutCommentsDataInput!
  create: TopicCreateWithoutCommentsInput!
}

input TopicUpsertWithoutVotesInput {
  update: TopicUpdateWithoutVotesDataInput!
  create: TopicCreateWithoutVotesInput!
}

input TopicUpsertWithWhereUniqueWithoutMembershipInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutMembershipDataInput!
  create: TopicCreateWithoutMembershipInput!
}

input TopicUpsertWithWhereUniqueWithoutStationInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutStationDataInput!
  create: TopicCreateWithoutStationInput!
}

input TopicUpsertWithWhereUniqueWithoutUserInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutUserDataInput!
  create: TopicCreateWithoutUserInput!
}

input TopicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  identifier: String
  identifier_not: String
  identifier_in: [String!]
  identifier_not_in: [String!]
  identifier_lt: String
  identifier_lte: String
  identifier_gt: String
  identifier_gte: String
  identifier_contains: String
  identifier_not_contains: String
  identifier_starts_with: String
  identifier_not_starts_with: String
  identifier_ends_with: String
  identifier_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  user: UserWhereInput
  station: StationWhereInput
  membership: MembershipWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
}

input TopicWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  identifier: String
  password: String!
  email: String!
  memberships(where: MembershipWhereInput, orderBy: MembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Membership!]
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  identifier: String
  password: String!
  email: String!
  memberships: MembershipCreateManyWithoutUserInput
  topics: TopicCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMembershipsInput {
  create: UserCreateWithoutMembershipsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTopicsInput {
  create: UserCreateWithoutTopicsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  name: String!
  identifier: String
  password: String!
  email: String!
  memberships: MembershipCreateManyWithoutUserInput
  topics: TopicCreateManyWithoutUserInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutMembershipsInput {
  id: ID
  name: String!
  identifier: String
  password: String!
  email: String!
  topics: TopicCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutTopicsInput {
  id: ID
  name: String!
  identifier: String
  password: String!
  email: String!
  memberships: MembershipCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  id: ID
  name: String!
  identifier: String
  password: String!
  email: String!
  memberships: MembershipCreateManyWithoutUserInput
  topics: TopicCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  identifier_ASC
  identifier_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  identifier: String
  password: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  identifier: String
  password: String
  email: String
  memberships: MembershipUpdateManyWithoutUserInput
  topics: TopicUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  identifier: String
  password: String
  email: String
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMembershipsInput {
  create: UserCreateWithoutMembershipsInput
  update: UserUpdateWithoutMembershipsDataInput
  upsert: UserUpsertWithoutMembershipsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTopicsInput {
  create: UserCreateWithoutTopicsInput
  update: UserUpdateWithoutTopicsDataInput
  upsert: UserUpsertWithoutTopicsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  identifier: String
  password: String
  email: String
  memberships: MembershipUpdateManyWithoutUserInput
  topics: TopicUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutMembershipsDataInput {
  name: String
  identifier: String
  password: String
  email: String
  topics: TopicUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutTopicsDataInput {
  name: String
  identifier: String
  password: String
  email: String
  memberships: MembershipUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesDataInput {
  name: String
  identifier: String
  password: String
  email: String
  memberships: MembershipUpdateManyWithoutUserInput
  topics: TopicUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutMembershipsInput {
  update: UserUpdateWithoutMembershipsDataInput!
  create: UserCreateWithoutMembershipsInput!
}

input UserUpsertWithoutTopicsInput {
  update: UserUpdateWithoutTopicsDataInput!
  create: UserCreateWithoutTopicsInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  identifier: String
  identifier_not: String
  identifier_in: [String!]
  identifier_not_in: [String!]
  identifier_lt: String
  identifier_lte: String
  identifier_gt: String
  identifier_gte: String
  identifier_contains: String
  identifier_not_contains: String
  identifier_starts_with: String
  identifier_not_starts_with: String
  identifier_ends_with: String
  identifier_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  memberships_every: MembershipWhereInput
  memberships_some: MembershipWhereInput
  memberships_none: MembershipWhereInput
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  identifier: String
  email: String
}

type Vote {
  id: ID!
  type: VoteType!
  user: User!
  station: Station!
  topic: Topic!
  comment: Comment
  membership: Membership!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  type: VoteType!
  user: UserCreateOneWithoutVotesInput!
  station: StationCreateOneWithoutVotesInput!
  topic: TopicCreateOneWithoutVotesInput!
  comment: CommentCreateOneWithoutVotesInput
  membership: MembershipCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutCommentInput {
  create: [VoteCreateWithoutCommentInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutMembershipInput {
  create: [VoteCreateWithoutMembershipInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutStationInput {
  create: [VoteCreateWithoutStationInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutTopicInput {
  create: [VoteCreateWithoutTopicInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutCommentInput {
  id: ID
  type: VoteType!
  user: UserCreateOneWithoutVotesInput!
  station: StationCreateOneWithoutVotesInput!
  topic: TopicCreateOneWithoutVotesInput!
  membership: MembershipCreateOneWithoutVotesInput!
}

input VoteCreateWithoutMembershipInput {
  id: ID
  type: VoteType!
  user: UserCreateOneWithoutVotesInput!
  station: StationCreateOneWithoutVotesInput!
  topic: TopicCreateOneWithoutVotesInput!
  comment: CommentCreateOneWithoutVotesInput
}

input VoteCreateWithoutStationInput {
  id: ID
  type: VoteType!
  user: UserCreateOneWithoutVotesInput!
  topic: TopicCreateOneWithoutVotesInput!
  comment: CommentCreateOneWithoutVotesInput
  membership: MembershipCreateOneWithoutVotesInput!
}

input VoteCreateWithoutTopicInput {
  id: ID
  type: VoteType!
  user: UserCreateOneWithoutVotesInput!
  station: StationCreateOneWithoutVotesInput!
  comment: CommentCreateOneWithoutVotesInput
  membership: MembershipCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  id: ID
  type: VoteType!
  station: StationCreateOneWithoutVotesInput!
  topic: TopicCreateOneWithoutVotesInput!
  comment: CommentCreateOneWithoutVotesInput
  membership: MembershipCreateOneWithoutVotesInput!
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VotePreviousValues {
  id: ID!
  type: VoteType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: VoteType
  type_not: VoteType
  type_in: [VoteType!]
  type_not_in: [VoteType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

input VoteUpdateInput {
  type: VoteType
  user: UserUpdateOneRequiredWithoutVotesInput
  station: StationUpdateOneRequiredWithoutVotesInput
  topic: TopicUpdateOneRequiredWithoutVotesInput
  comment: CommentUpdateOneWithoutVotesInput
  membership: MembershipUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateManyDataInput {
  type: VoteType
}

input VoteUpdateManyMutationInput {
  type: VoteType
}

input VoteUpdateManyWithoutCommentInput {
  create: [VoteCreateWithoutCommentInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutCommentInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithoutMembershipInput {
  create: [VoteCreateWithoutMembershipInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutMembershipInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutMembershipInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithoutStationInput {
  create: [VoteCreateWithoutStationInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutStationInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutStationInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithoutTopicInput {
  create: [VoteCreateWithoutTopicInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutTopicInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutTopicInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput!
  data: VoteUpdateManyDataInput!
}

input VoteUpdateWithoutCommentDataInput {
  type: VoteType
  user: UserUpdateOneRequiredWithoutVotesInput
  station: StationUpdateOneRequiredWithoutVotesInput
  topic: TopicUpdateOneRequiredWithoutVotesInput
  membership: MembershipUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutMembershipDataInput {
  type: VoteType
  user: UserUpdateOneRequiredWithoutVotesInput
  station: StationUpdateOneRequiredWithoutVotesInput
  topic: TopicUpdateOneRequiredWithoutVotesInput
  comment: CommentUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutStationDataInput {
  type: VoteType
  user: UserUpdateOneRequiredWithoutVotesInput
  topic: TopicUpdateOneRequiredWithoutVotesInput
  comment: CommentUpdateOneWithoutVotesInput
  membership: MembershipUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutTopicDataInput {
  type: VoteType
  user: UserUpdateOneRequiredWithoutVotesInput
  station: StationUpdateOneRequiredWithoutVotesInput
  comment: CommentUpdateOneWithoutVotesInput
  membership: MembershipUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  type: VoteType
  station: StationUpdateOneRequiredWithoutVotesInput
  topic: TopicUpdateOneRequiredWithoutVotesInput
  comment: CommentUpdateOneWithoutVotesInput
  membership: MembershipUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutCommentInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutCommentDataInput!
}

input VoteUpdateWithWhereUniqueWithoutMembershipInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutMembershipDataInput!
}

input VoteUpdateWithWhereUniqueWithoutStationInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutStationDataInput!
}

input VoteUpdateWithWhereUniqueWithoutTopicInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutTopicDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutCommentInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutCommentDataInput!
  create: VoteCreateWithoutCommentInput!
}

input VoteUpsertWithWhereUniqueWithoutMembershipInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutMembershipDataInput!
  create: VoteCreateWithoutMembershipInput!
}

input VoteUpsertWithWhereUniqueWithoutStationInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutStationDataInput!
  create: VoteCreateWithoutStationInput!
}

input VoteUpsertWithWhereUniqueWithoutTopicInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutTopicDataInput!
  create: VoteCreateWithoutTopicInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: VoteType
  type_not: VoteType
  type_in: [VoteType!]
  type_not_in: [VoteType!]
  user: UserWhereInput
  station: StationWhereInput
  topic: TopicWhereInput
  comment: CommentWhereInput
  membership: MembershipWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
`